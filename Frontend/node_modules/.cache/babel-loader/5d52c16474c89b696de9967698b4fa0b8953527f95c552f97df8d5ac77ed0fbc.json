{"ast":null,"code":"import { URL } from \"./../../config\";\nimport axios from 'axios';\n\n//GET\nexport async function searchCustomerData() {\n  if (!localStorage[\"customers\"]) {\n    try {\n      const response = await axios.get(URL + \"clientes\", {\n        headers: {\n          Authorization: localStorage[\"token\"]\n        }\n      });\n      localStorage[\"customers\"] = JSON.stringify(response.data);\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        console.error('Acceso denegado. Redireccionando a /login...');\n        localStorage.clear();\n        window.location.href = '/login';\n      } else {\n        console.error('Error al obtener los clientes:', error);\n      }\n    }\n    return [];\n  }\n  return JSON.parse(localStorage[\"customers\"]);\n}\n\n//DELETE\nexport async function removeCustomerData(remove) {\n  try {\n    await axios.delete(URL + \"clientes\", {\n      headers: {\n        Authorization: localStorage[\"token\"]\n      }\n    });\n    let customers = await searchCustomerData();\n    customers = customers.filter(customer => customer.Id_Cliente !== remove);\n    localStorage[\"customers\"] = JSON.stringify(customers);\n    return true;\n  } catch (error) {\n    console.error('Error al eliminar el cliente:', error);\n    return false;\n  }\n}\n\n//PUT\nexport async function editCustomerData(edit) {\n  try {\n    await axios.put(URL + \"clientes\", edit, {\n      headers: {\n        Authorization: localStorage[\"token\"]\n      }\n    });\n    let customers = await searchCustomerData();\n    customers = customers.map(customer => {\n      if (customer.Id_Cliente === edit.Id_Cliente) {\n        return edit;\n      }\n      return customer;\n    });\n    localStorage[\"customers\"] = JSON.stringify(customers);\n    return true;\n  } catch (error) {\n    console.error('Error al editar el cliente:', error);\n    return false;\n  }\n}\n\n//POST\nexport async function saveCustomerData(customer) {\n  try {\n    await axios.post(URL + \"clientes\", customer, {\n      headers: {\n        Authorization: localStorage[\"token\"]\n      }\n    });\n    let customers = await searchCustomerData();\n    customers.push(customer);\n    localStorage[\"customers\"] = JSON.stringify(customers);\n    return true;\n  } catch (error) {\n    console.error('Error al guardar el cliente:', error);\n    return false;\n  }\n}","map":{"version":3,"names":["URL","axios","searchCustomerData","localStorage","response","get","headers","Authorization","JSON","stringify","data","error","status","console","clear","window","location","href","parse","removeCustomerData","remove","delete","customers","filter","customer","Id_Cliente","editCustomerData","edit","put","map","saveCustomerData","post","push"],"sources":["D:/alexr/Documents/UMG/ANALISIS DE SISTEMAS I/proyectoFinalAnalisis/Frontend/src/pages/customer/CustomerApi.tsx"],"sourcesContent":["import { customerFormat } from \"./CustomerFormat\";\r\nimport { URL } from \"./../../config\";\r\nimport axios from 'axios';\r\n\r\n//GET\r\nexport async function searchCustomerData(): Promise<customerFormat[]> {\r\n  if (!localStorage[\"customers\"]) {\r\n    try {\r\n      const response = await axios.get(URL + \"clientes\", {\r\n        headers: {\r\n          Authorization: localStorage[\"token\"]\r\n        }\r\n      });\r\n      localStorage[\"customers\"] = JSON.stringify(response.data);\r\n    } catch (error: any) {\r\n      if (error.response && error.response.status === 403) {\r\n        console.error('Acceso denegado. Redireccionando a /login...');\r\n        localStorage.clear();\r\n        window.location.href = '/login';\r\n      } else {\r\n        console.error('Error al obtener los clientes:', error);\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n  return JSON.parse(localStorage[\"customers\"]);\r\n}\r\n\r\n\r\n//DELETE\r\nexport async function removeCustomerData(remove: string): Promise<boolean> {\r\n  try {\r\n    await axios.delete(URL + \"clientes\", {\r\n      headers: {\r\n        Authorization: localStorage[\"token\"]\r\n      }\r\n    });\r\n    let customers: customerFormat[] = await searchCustomerData();\r\n    customers = customers.filter((customer: customerFormat) => customer.Id_Cliente !== remove);\r\n    localStorage[\"customers\"] = JSON.stringify(customers);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al eliminar el cliente:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n//PUT\r\nexport async function editCustomerData(edit: customerFormat): Promise<boolean> {\r\n  try {\r\n    await axios.put(URL + \"clientes\", edit, {\r\n      headers: {\r\n        Authorization: localStorage[\"token\"]\r\n      }\r\n    });\r\n    let customers: customerFormat[] = await searchCustomerData();\r\n    customers = customers.map((customer: customerFormat) => {\r\n      if (customer.Id_Cliente === edit.Id_Cliente) {\r\n        return edit;\r\n      }\r\n      return customer;\r\n    });\r\n    localStorage[\"customers\"] = JSON.stringify(customers);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al editar el cliente:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n//POST\r\nexport async function saveCustomerData(customer: customerFormat): Promise<boolean> {\r\n  try {\r\n    await axios.post(URL + \"clientes\", customer, {\r\n      headers: {\r\n        Authorization: localStorage[\"token\"]\r\n      }\r\n    });\r\n    let customers: customerFormat[] = await searchCustomerData();\r\n    customers.push(customer);\r\n    localStorage[\"customers\"] = JSON.stringify(customers);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al guardar el cliente:', error);\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}